@using AntDesign
@using System.Text.Json
@page "/"
@{
    var options = new[]
    {
        new PlatformUiOption(RenderPlatform.Wechat, "微", Color.Green1, IconType.Outline.Wechat,
            "微信"),
        new PlatformUiOption(RenderPlatform.Cnblogs, "博", Color.Green2, IconType.Outline.Robot, "博客园"),
        new PlatformUiOption(RenderPlatform.Zhihu, "知", Color.Green3, IconType.Fill.ZhihuCircle, "知乎"),
        new PlatformUiOption(RenderPlatform.TencentCloud, "腾", Color.Green4, IconType.Outline.Qq, "腾讯云"),
        new PlatformUiOption(RenderPlatform.Toutiao, "头", Color.Green5, IconType.Outline.Fire, "今日头条"),
        new PlatformUiOption(RenderPlatform.InfoQ, "因", Color.Green6, IconType.Outline.Info, "InfoQ"),
        new PlatformUiOption(RenderPlatform.Bilibili, "哔", Color.Green7, IconType.Outline.Rocket, "Bilibili"),
        new PlatformUiOption(RenderPlatform.Juejin, "金", Color.Green8, IconType.Outline.Block, "掘金"),
        new PlatformUiOption(RenderPlatform.Csdn, "钱", Color.Green9, IconType.Outline.Monitor, "CSDN"),
        new PlatformUiOption(RenderPlatform.Aliyun, "里", Color.Green10, IconType.Outline.Cloud, "阿里云"),
        new PlatformUiOption(RenderPlatform.Sifou, "思", Color.Blue1, IconType.Outline.Table, "思否"),
    };
    // group options into 5 buttons per row
    var optionGroups = options
        .Select((option, index) => new { option, index })
        .GroupBy(x => x.index / 5)
        .Select(x => x.Select(y => y.option).ToArray())
        .ToArray();
}
<Row Gutter="16">
    <Col Span="12">
        <Card Bordered="false" Title="Copy output">
            <Body>
            @{
                foreach (var group in optionGroups)
                {
                    <Space>
                        @foreach (var option in group)
                        {
                            <SpaceItem>
                                <Tooltip Title="@option.FullName">
                                    <Button Id="@($"btnRenderOut{option.Platform:G}")"
                                            Icon="@option.Icon"
                                            OnClick="args => RenderOut(option.Platform)"
                                            Color="@option.Color">
                                        @option.Name
                                    </Button>
                                </Tooltip>
                            </SpaceItem>
                        }
                    </Space>
                }
            }
            </Body>
        </Card>
        <Card Bordered="false" Title="Markdown source">
            <Button Icon="@IconType.Fill.Star" Id="btnCopySource" OnClick="OnClickCopyMarkdown">Copy Markdown</Button>
            <Button Icon="@IconType.Fill.Star" Id="btcSetTextMarkdown" OnClick="OnClickSetMarkdown">Populate test data</Button>
            <TextArea @bind-Value="MarkdownSource" OnChange="MarkdownSourceChanged" Style="height: 500px" Id="markdown_source"></TextArea>
            <div id="copyOut" style="display: none">
                @((MarkupString)CopyOut)
            </div>
        </Card>
        <Card Bordered="false" Title="Copyright Template">
            <TextArea @bind-Value="CopyrightTemplate" Style="height: 200px" Id="copyright_template"></TextArea>
        </Card>
        <Card Bordered="false" Title="Ending Template">
            <TextArea @bind-Value="EndingTemplate" Style="height: 200px" Id="ending_template"></TextArea>
        </Card>
        <Card Bordered="false" Title="Ad Template">
            <TextArea @bind-Value="AdTemplate" Style="height: 200px" Id="ad_template"></TextArea>
        </Card>
    </Col>
    <Col Span="12">
        <Card Bordered="false" Title="Render preview">
            <Body>
            @{
                foreach (var group in optionGroups)
                {
                    <Space>
                        @foreach (var option in group)
                        {
                            <SpaceItem>
                                <Tooltip Title="@option.FullName">
                                    <Button Id="@($"btnRenderPreview{option.Platform:G}")"
                                            Icon="@option.Icon"
                                            OnClick="args => RenderPreview(option.Platform)"
                                            Color="@option.Color">
                                        @option.Name
                                    </Button>
                                </Tooltip>
                            </SpaceItem>
                        }
                    </Space>
                }
            }
            </Body>
        </Card>
        <Card Bordered="false" Title="@($"Preview {_lastPlatform:G}")">
            <Body>
            <Descriptions Title="Yaml Front">
                <DescriptionsItem Title="Title">
                    <Input Id="txtTitle" Value="@YamlFront.Title"/>
                </DescriptionsItem>
                <DescriptionsItem Title="Cover">
                    <Input Id="txtCover" Value="@YamlFront.Cover"/>
                </DescriptionsItem>
                <DescriptionsItem Title="Slag">
                    <Input Id="txtSlag" Value="@YamlFront.Slag"/>
                </DescriptionsItem>
                <DescriptionsItem Title="Summary">
                    <Input Id="txtSummary" Value="@YamlFront.Summary"/>
                </DescriptionsItem>
                <DescriptionsItem Title="Tags">
                    <Input Id="txtTags" Value="@YamlFront.Tags"/>
                </DescriptionsItem>
            </Descriptions>
            <Divider/>
            <div id="preview">
                @((MarkupString)HtmlOut)
            </div>
            </Body>
        </Card>
    </Col>
</Row>

@code{
    public string MarkdownSource { get; set; } = "";
    public string HtmlOut { get; set; } = "<div>waiting results</div>";
    public YamlFront YamlFront { get; set; } = new();
    public string CopyOut { get; set; } = "<div>waiting results</div>";

    public string CopyrightTemplate { get; set; } = PreDefinedContent.CopyrightTemplate;

    public string EndingTemplate { get; set; } = PreDefinedContent.EndingTemplate;
    public string AdTemplate { get; set; } = PreDefinedContent.AdTemplate;

    private RenderPlatform _lastPlatform = RenderPlatform.Wechat;

    [Inject]
    public IMdRender MdRender { get; set; }

    [Inject]
    public IYamlFrontMatterRetriever YamlFrontMatterRetriever { get; set; }

    [Inject]
    public IJSRuntime JsRuntime { get; set; }

    [Inject]
    public IMessageService MessageService { get; set; }

    private async Task MarkdownSourceChanged(string value)
    {
        await RenderPreview(_lastPlatform);
    }

    private async Task RenderPreview(RenderPlatform platform)
    {
        _lastPlatform = platform;
        if (!string.IsNullOrWhiteSpace(MarkdownSource))
        {
            var result = await MdRender.Render(new MdRenderOptions(platform, MarkdownSource)
            {
                CopyrightTemplate = CopyrightTemplate,
                EndingTemplate = EndingTemplate,
                AdTemplate = AdTemplate
            });
            HtmlOut = result;
            YamlFront = await YamlFrontMatterRetriever.GetYamlFrontAsync(MarkdownSource);
            _ = Task.Run(async () =>
            {
                await Task.Delay(100);
                await JsRuntime.InvokeVoidAsync("mdRender", platform.ToString(), "#preview");
            });
        }
    }

    private async Task RenderOut(RenderPlatform platform)
    {
        await RenderPreview(platform);
        if (!string.IsNullOrWhiteSpace(MarkdownSource))
        {
            var result = await MdRender.Render(new MdRenderOptions(platform, MarkdownSource)
            {
                CopyrightTemplate = CopyrightTemplate,
                EndingTemplate = EndingTemplate,
                AdTemplate = AdTemplate
            });
            CopyOut = result;
            _ = Task.Run(async () =>
            {
                await Task.Delay(100);
                await JsRuntime.InvokeVoidAsync("mdRender", platform.ToString(), "#copyOut");
                await JsRuntime.InvokeVoidAsync("copyOut", platform.ToString(), result);
            });
            await MessageService.Info($"copy success for {platform:G}");
        }
    }

    private async Task OnClickCopyMarkdown(MouseEventArgs obj)
    {
        await JsRuntime.InvokeVoidAsync("copyMarkdown");
    }

    private Task OnClickSetMarkdown(MouseEventArgs obj)
    {
        MarkdownSource = PreDefinedContent.TestMarkdown;
        return Task.CompletedTask;
    }

}